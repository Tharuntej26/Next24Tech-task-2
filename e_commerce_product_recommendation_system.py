# -*- coding: utf-8 -*-
"""E-commerce Product Recommendation System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o3qx1VzJUBH1NKk9hx28ojWoSs9zfusJ

**Load and Inspect Data**
"""

import pandas as pd

# Load the dataset
file_path = '/content/7817_1.csv'
data = pd.read_csv(file_path)

# Display dataset information
print(data.info())
print(data.head())

# Check for missing values
print(data.isnull().sum())

# Fill missing values if necessary
data.fillna({'reviews.rating': data['reviews.rating'].median()}, inplace=True)

# Display the first few rows to understand the structure
print(data.head())

"""**Handle Duplicate Entries and Create User-Product Matrix**"""

import numpy as np

# Aggregate duplicate entries by averaging the ratings
data_aggregated = data.groupby(['reviews.username', 'asins']).agg({'reviews.rating': 'mean'}).reset_index()

# Pivot data to create user-product matrix
user_product_matrix = data_aggregated.pivot(index='reviews.username', columns='asins', values='reviews.rating').fillna(0)

# Normalize the user-product matrix
user_ratings_mean = np.mean(user_product_matrix.values, axis=1)
user_product_matrix_normalized = user_product_matrix.values - user_ratings_mean.reshape(-1, 1)

"""**Apply SVD for Matrix Factorization**"""

from scipy.sparse.linalg import svds

# Perform Singular Value Decomposition (SVD)
U, sigma, Vt = svds(user_product_matrix_normalized, k=50)
sigma = np.diag(sigma)



"""**Predict Ratings**"""

# Predict ratings for users and products
all_user_predicted_ratings = np.dot(np.dot(U, sigma), Vt) + user_ratings_mean.reshape(-1, 1)
predicted_ratings = pd.DataFrame(all_user_predicted_ratings, columns=user_product_matrix.columns)

"""**Define Recommendation Function**"""

def recommend_products(user_id, num_recommendations=5):
    user_row_number = user_product_matrix.index.get_loc(user_id)
    sorted_user_predictions = predicted_ratings.iloc[user_row_number].sort_values(ascending=False)

    user_data = data[data['reviews.username'] == user_id]
    user_full = (user_data.merge(data, how='left', on='asins').
                 sort_values(['reviews.rating_x'], ascending=False)) # Sort by 'reviews.rating_x'

    recommendations = (data[~data['asins'].isin(user_full['asins'])].
                       merge(pd.DataFrame(sorted_user_predictions).reset_index(), how='left',
                             on='asins').
                       rename(columns={user_row_number: 'PredictedRating'}).
                       sort_values('PredictedRating', ascending=False).
                       iloc[:num_recommendations, :-1])

    return recommendations

"""**Find a Valid User ID and Generate Recommendations**"""

# Find a valid user_id from the dataset
valid_user_id = data['reviews.username'].unique()[0]  # Taking the first unique user_id as an example
print(f'Using valid user_id: {valid_user_id}')

# Example usage
print(f'Recommended products for user {valid_user_id}:')
print(recommend_products(user_id=valid_user_id))

# Display the basic information again to verify any changes made
print(data.info())
print(data.head())